
#We'll publish the voxel grid used by this costmap
publish_voxel_map: true

#Set the global and robot frames for the costmap
global_frame: map
robot_base_frame: odom_combined

#Set the update and publish frequency of the costmap
update_frequency: 5.0
publish_frequency: 2.0

#We'll configure this costmap to be a rolling window... meaning it is always
#centered at the robot
static_map: false
rolling_window: false
width: 45.0
height: 45.0
resolution: 0.05
origin_x: -15.0
origin_y: -15.0

#For this example we'll configure the costmap in voxel-grid mode
map_type: voxel

#Voxel grid specific parameters
origin_z: 0.0
z_resolution: 0.2
z_voxels: 10
unknown_threshold: 9
mark_threshold: 0

#Set the tolerance we're willing to have for tf transforms
transform_tolerance: 0.3

#Obstacle marking parameters
obstacle_range: 2.5
max_obstacle_height: 2.0
raytrace_range: 3.0

#The footprint of the robot and associated padding
footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
footprint_padding: 0.01

#Cost function parameters
inflation_radius: 0.55
cost_scaling_factor: 10.0

#The cost at which a cell is considered an obstacle when a map is read from the map_server
lethal_cost_threshold: 100

#Configuration for the sensors that the costmap will use to update a map

plugins:
  - {name: obstacle_layer, type: "costmap_2d::VoxelLayer"}

# observation_sources should match with laser topic
obstacle_layer:
    observation_sources: base_scan 
    base_scan: {data_type: LaserScan, sensor_frame: /kompai_laser, topic: /base_scan }
