
#We'll publish the voxel grid used by this costmap
publish_voxel_map: true

#Set the global and robot frames for the costmap
global_frame: map
robot_base_frame: odom_combined

#Set the update and publish frequency of the costmap
update_frequency: 5.0
publish_frequency: 2.0

#We'll configure this costmap to be a rolling window... meaning it is always
#centered at the robot
static_map: false
rolling_window: false
width: 45.0
height: 45.0
resolution: 0.05
origin_x: -15.0
origin_y: -15.0

#For this example we'll configure the costmap in voxel-grid mode
map_type: voxel

#Voxel grid specific parameters
origin_z: 0.0
z_resolution: 0.2
z_voxels: 10
unknown_threshold: 9
mark_threshold: 0

#Set the tolerance we're willing to have for tf transforms
transform_tolerance: 0.3

#Obstacle marking parameters
obstacle_range: 2.5
max_obstacle_height: 2.0
raytrace_range: 3.0

#The footprint of the robot and associated padding
footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
footprint_padding: 0.01

#Cost function parameters
inflation_radius: 0.55
cost_scaling_factor: 10.0

#The cost at which a cell is considered an obstacle when a map is read from the map_server
lethal_cost_threshold: 100

#Configuration for the sensors that the costmap will use to update a map

plugins:
  - {name: sonar_layer,   type: "range_sensor_layer::RangeSensorLayer"}
#  - {name: obstacle_layer, type: "costmap_2d::VoxelLayer"}

sonar_layer:
    #Namespace that is prepended to all topic names 
    ns: ""

    #List of Range topics to subscribe to 
    topics: ["/sonarRFID"]

    #layer will warn the user and the layer will be marked as not current after this time. 0 disables it. 
    no_readings_timeout: 0.0
    
    #Cells with a probability lower than the clear_threshold are marked as free space in the master costmap. 
    clear_threshold: .2
    
    #Cells with a probability higher than the mark_threshold are marked as lethal obstacles in the master costmap. 
    mark_threshold: .5
    
    #Whether to clear the sensor readings on max. range 
    clear_on_max_reading: false
    
    input_sensor_type: "VARIABLE"

# observation_sources should match with laser topic
#obstacle_layer:
#    observation_sources: base_scan 
#    base_scan: {data_type: LaserScan, sensor_frame: /kompai_laser, topic: /base_scan }
